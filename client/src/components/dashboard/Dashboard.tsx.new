import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { BedCard } from './BedCard';
import { 
  Users, 
  Bed, 
  AlertTriangle, 
  Check, 
  Search, 
  RefreshCw,
  ArrowDownUp
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';

export function Dashboard() {
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredBeds, setFilteredBeds] = useState([]);
  const [sortOption, setSortOption] = useState('bedNumber');

  // Fetch beds
  const { data: beds = [], isLoading, isError, refetch } = useQuery({
    queryKey: ['/api/beds'],
    refetchOnWindowFocus: false,
  });

  // Stats totals
  const totalBeds = beds.length;
  const occupiedBeds = beds.filter(bed => bed.status !== 'available').length;
  const criticalBeds = beds.filter(bed => bed.status === 'critical').length;
  const attentionBeds = beds.filter(bed => bed.status === 'attention').length;
  const stableBeds = beds.filter(bed => bed.status === 'stable').length;

  // Filter and sort beds
  useEffect(() => {
    if (!beds) return;

    let filtered = [...beds];

    // Apply search filter
    if (searchTerm) {
      const search = searchTerm.toLowerCase();
      filtered = filtered.filter(
        bed => 
          bed.bedNumber.toLowerCase().includes(search) || 
          bed.wing.toLowerCase().includes(search) || 
          (bed.patient && bed.patient.name.toLowerCase().includes(search)) ||
          (bed.patient && bed.patient.medicalRecordNumber.toLowerCase().includes(search))
      );
    }

    // Apply sorting
    filtered.sort((a, b) => {
      if (sortOption === 'bedNumber') {
        return a.bedNumber.localeCompare(b.bedNumber);
      } else if (sortOption === 'wing') {
        return a.wing.localeCompare(b.wing);
      } else if (sortOption === 'status') {
        // Sort by status priority: critical, attention, stable, available
        const statusOrder = { critical: 0, attention: 1, stable: 2, available: 3 };
        return statusOrder[a.status] - statusOrder[b.status];
      }
      return 0;
    });

    setFilteredBeds(filtered);
  }, [beds, searchTerm, sortOption]);

  const handleRefresh = () => {
    refetch();
  };

  // Render loading state
  if (isLoading) {
    return (
      <div className="page-container animate-fade-in">
        <div className="flex items-center justify-between mb-6">
          <div>
            <Skeleton className="h-7 w-48 mb-1" />
            <Skeleton className="h-4 w-32" />
          </div>
          <Skeleton className="h-10 w-10 rounded-full" />
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          {[...Array(4)].map((_, i) => (
            <Skeleton key={i} className="h-24 rounded-md" />
          ))}
        </div>

        <div className="flex justify-between items-center mb-4">
          <Skeleton className="h-10 w-48" />
          <Skeleton className="h-10 w-32" />
        </div>

        <div className="bed-grid">
          {[...Array(8)].map((_, i) => (
            <Skeleton key={i} className="h-40 rounded-md" />
          ))}
        </div>
      </div>
    );
  }

  // Render error state
  if (isError) {
    return (
      <div className="page-container">
        <div className="bg-destructive/10 p-4 rounded-md flex flex-col items-center justify-center h-40 text-center">
          <AlertTriangle className="h-8 w-8 text-destructive mb-2" />
          <h3 className="text-xl font-semibold text-destructive">Falha ao carregar dados</h3>
          <p className="text-muted-foreground mb-4">Ocorreu um erro ao buscar os leitos.</p>
          <Button onClick={handleRefresh}>Tentar novamente</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="page-container animate-fade-in">
      {/* Dashboard Header - exactly matching reference image */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
        <div>
          <h1 className="page-title">Dashboard</h1>
          <p className="page-subtitle">Monitoramento em tempo real dos leitos</p>
        </div>
        
        <div className="mt-4 md:mt-0">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleRefresh}
            className="rounded-full h-9 px-4 border-border"
          >
            <RefreshCw size={14} className="mr-2" />
            Atualizar
          </Button>
        </div>
      </div>

      {/* Stats Cards - styled to match the reference exactly */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        {/* Total de Leitos */}
        <div className="bg-card dark:bg-card shadow-sm rounded-md p-4 border border-border">
          <div className="flex justify-between items-start">
            <div>
              <p className="text-sm font-medium text-muted-foreground">Total de Leitos</p>
              <h3 className="text-2xl font-bold mt-1">{totalBeds}</h3>
              <p className="text-xs mt-1.5 text-muted-foreground">
                <span className="text-primary">{occupiedBeds}</span> ocupados
              </p>
            </div>
            <div className="bg-primary/10 text-primary p-2.5 rounded-md">
              <Bed size={20} />
            </div>
          </div>
        </div>

        {/* Leitos Críticos */}
        <div className="bg-card dark:bg-card shadow-sm rounded-md p-4 border border-border">
          <div className="flex justify-between items-start">
            <div>
              <p className="text-sm font-medium text-muted-foreground">Críticos</p>
              <h3 className="text-2xl font-bold mt-1">{criticalBeds}</h3>
              <p className="text-xs mt-1.5 text-muted-foreground">
                <span className="text-critical">{criticalBeds > 0 ? 'Atenção prioritária' : 'Nenhum crítico'}</span>
              </p>
            </div>
            <div className="bg-critical/10 text-critical p-2.5 rounded-md">
              <AlertTriangle size={20} />
            </div>
          </div>
        </div>

        {/* Leitos em Atenção */}
        <div className="bg-card dark:bg-card shadow-sm rounded-md p-4 border border-border">
          <div className="flex justify-between items-start">
            <div>
              <p className="text-sm font-medium text-muted-foreground">Em Atenção</p>
              <h3 className="text-2xl font-bold mt-1">{attentionBeds}</h3>
              <p className="text-xs mt-1.5 text-muted-foreground">
                <span className="text-attention">{attentionBeds > 0 ? 'Monitorar frequentemente' : 'Nenhum em atenção'}</span>
              </p>
            </div>
            <div className="bg-attention/10 text-attention p-2.5 rounded-md">
              <AlertTriangle size={20} />
            </div>
          </div>
        </div>

        {/* Leitos Estáveis */}
        <div className="bg-card dark:bg-card shadow-sm rounded-md p-4 border border-border">
          <div className="flex justify-between items-start">
            <div>
              <p className="text-sm font-medium text-muted-foreground">Estáveis</p>
              <h3 className="text-2xl font-bold mt-1">{stableBeds}</h3>
              <p className="text-xs mt-1.5 text-muted-foreground">
                <span className="text-stable">{stableBeds > 0 ? 'Em boas condições' : 'Nenhum estável'}</span>
              </p>
            </div>
            <div className="bg-stable/10 text-stable p-2.5 rounded-md">
              <Check size={20} />
            </div>
          </div>
        </div>
      </div>

      {/* Filter and Search */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
        <div className="relative w-full md:w-72">
          <Search className="absolute left-3 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Buscar leito ou paciente..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-9 h-10"
          />
        </div>
        
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setSortOption('status')}
            className={`px-3 h-9 text-xs ${sortOption === 'status' ? 'bg-muted' : ''}`}
          >
            <ArrowDownUp size={14} className="mr-1.5" />
            Status
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setSortOption('wing')}
            className={`px-3 h-9 text-xs ${sortOption === 'wing' ? 'bg-muted' : ''}`}
          >
            <ArrowDownUp size={14} className="mr-1.5" />
            Ala
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setSortOption('bedNumber')}
            className={`px-3 h-9 text-xs ${sortOption === 'bedNumber' ? 'bg-muted' : ''}`}
          >
            <ArrowDownUp size={14} className="mr-1.5" />
            Leito
          </Button>
        </div>
      </div>

      {/* Results count */}
      {searchTerm && (
        <div className="mb-3">
          <Badge variant="outline" className="text-xs">
            {filteredBeds.length} resultados encontrados
          </Badge>
        </div>
      )}

      {/* Beds Grid */}
      <div className="bed-grid">
        {filteredBeds.length > 0 ? (
          filteredBeds.map((bed) => (
            <BedCard key={bed.id} bed={bed} />
          ))
        ) : (
          <div className="col-span-4 bg-card/50 rounded-lg p-8 text-center">
            <Users className="mx-auto h-12 w-12 text-muted-foreground/30 mb-3" />
            <h3 className="text-xl font-medium mb-1">Nenhum leito encontrado</h3>
            <p className="text-muted-foreground">
              {searchTerm 
                ? `Não encontramos leitos com "${searchTerm}". Tente uma busca diferente.` 
                : 'Nenhum leito cadastrado no sistema.'}
            </p>
          </div>
        )}
      </div>
    </div>
  );
}