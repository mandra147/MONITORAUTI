import { Link } from 'wouter';
import { Calendar, User, Heart, Activity } from 'lucide-react';
import { Bed } from '@/types';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';

interface BedCardProps {
  bed: Bed;
}

// Status badge translations
const statusLabels = {
  critical: 'Crítico',
  attention: 'Atenção',
  stable: 'Estável',
  available: 'Disponível'
};

// Status to CSS class mapping
const statusClasses = {
  critical: 'bed-card-critical',
  attention: 'bed-card-attention',
  stable: 'bed-card-stable',
  available: 'bed-card-available'
};

// Status badge variants
const statusBadgeVariants = {
  critical: 'status-badge-critical',
  attention: 'status-badge-attention',
  stable: 'status-badge-stable',
  available: 'status-badge-available'
};

export function BedCard({ bed }: BedCardProps) {
  // Destructure properties from bed
  const { id, bedNumber, wing, status, patient } = bed;
  const hasPatient = !!patient;

  // Props for border styling
  const cardClass = cn(
    'bed-card',
    statusClasses[status]
  );

  // Calculate days hospitalized
  const getDaysHospitalized = () => {
    if (!patient?.admissionDate) return 0;
    
    const admissionDate = new Date(patient.admissionDate);
    const today = new Date();
    const diffTime = Math.abs(today.getTime() - admissionDate.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays;
  };

  return (
    <div className={cn(cardClass, 'hover-light')}>
      {/* Card header with bed info */}
      <div className="flex justify-between items-start mb-2">
        <div>
          <h3 className="font-semibold text-sm">
            Leito {bedNumber}
          </h3>
          <p className="text-xs text-muted-foreground">
            Ala {wing}
          </p>
        </div>
        
        <Badge 
          variant="outline" 
          className={cn(
            "status-badge", 
            statusBadgeVariants[status]
          )}
        >
          {statusLabels[status]}
        </Badge>
      </div>
      
      {/* Divider for occupied beds */}
      {hasPatient && (
        <div className="border-t my-2 border-border/50"></div>
      )}
      
      {/* If bed is occupied, show patient info */}
      {hasPatient ? (
        <div className="flex-1 flex flex-col">
          <Link 
            href={`/patients/${patient.id}`}
            className="text-sm font-medium hover:text-primary transition-colors line-clamp-1"
          >
            {patient.name}
          </Link>
          
          <div className="mt-auto pt-3">
            <div className="grid grid-cols-2 gap-2 text-xs">
              {/* Patient details */}
              <div className="flex items-center gap-1.5 text-muted-foreground">
                <User size={12} />
                <span>{patient.age} anos</span>
              </div>
              
              <div className="flex items-center gap-1.5 text-muted-foreground">
                <Calendar size={12} />
                <span>{getDaysHospitalized()} dias</span>
              </div>
              
              <div className="flex items-center gap-1.5 text-muted-foreground">
                <Activity size={12} />
                <span>SAPS: {patient.sapsScore || 'N/A'}</span>
              </div>
              
              <div className="flex items-center gap-1.5 text-muted-foreground">
                <Heart size={12} />
                <span>{patient.mainDiagnosis}</span>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="flex-1 flex flex-col justify-center items-center py-4">
          <div className="text-muted-foreground/60 text-sm">
            Leito disponível
          </div>
          <Link 
            href="/patients/new" 
            className="mt-2 text-xs text-primary hover:underline"
          >
            Adicionar paciente
          </Link>
        </div>
      )}
    </div>
  );
}